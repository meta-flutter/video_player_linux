// Mocks generated by Mockito 5.4.4 from annotations
// in video_player_linux/test/windows_video_player_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;

import 'test_api.g.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TestHostVideoPlayerApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestHostVideoPlayerApi extends _i1.Mock
    implements _i2.TestHostVideoPlayerApi {
  MockTestHostVideoPlayerApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int create(
    String? asset,
    String? uri,
    Map<String?, String?>? httpHeaders,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [
            asset,
            uri,
            httpHeaders,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  void dispose(int? textureId) => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [textureId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLooping(
    int? textureId,
    bool? isLooping,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setLooping,
          [
            textureId,
            isLooping,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setVolume(
    int? textureId,
    double? volume,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [
            textureId,
            volume,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPlaybackSpeed(
    int? textureId,
    double? speed,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [
            textureId,
            speed,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void play(int? textureId) => super.noSuchMethod(
        Invocation.method(
          #play,
          [textureId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getPosition(int? textureId) => (super.noSuchMethod(
        Invocation.method(
          #getPosition,
          [textureId],
        ),
        returnValue: 0,
      ) as int);

  @override
  void seekTo(
    int? textureId,
    int? position,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [
            textureId,
            position,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pause(int? textureId) => super.noSuchMethod(
        Invocation.method(
          #pause,
          [textureId],
        ),
        returnValueForMissingStub: null,
      );
}
